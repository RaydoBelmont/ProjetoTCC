generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  nome              String
  email             String           @unique
  workspaces        WorkspaceUser[]
  chamados          ChamadoUser[]  
  notificacoes      Notificacao[]
  historico         ChamadoHistorico[]
  setoresMembro     SetorMembro[]    // Relacionamento com tabela intermediária para membros do setor
  quadrosResponsavel Quadro[]        // Relacionamento com Quadros onde é responsável
}

model Workspace {
  id       Int             @id @default(autoincrement())
  nome     String
  clientes Clientes[]
  users    WorkspaceUser[]
  setores  Setor[]
}

model WorkspaceUser {
  userId      Int
  workspaceId Int
  isAdmin     Boolean
  isCriador   Boolean @default(false)
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([userId, workspaceId])
}

model Clientes {
  id          Int        @id @default(autoincrement())
  nome        String     
  razao       String?
  cpfCnpj     String
  iE          String?
  email       String?
  observacao  String?
  ativo       Boolean @default(true)
  workspaceId Int
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  contatos    Contatos[]
  chamados    Chamado[]
  endereco    Endereco?
}

model Endereco {
  id          Int        @id @default(autoincrement())
  rua         String
  numero      String
  cep         String
  bairro      String
  cidade      String
  uf          String
  cliente     Clientes    @relation(fields: [clienteId], references: [id])
  clienteId   Int @unique
}

model Contatos {
  id        Int      @id @default(autoincrement())
  telefone  String
  clienteId Int
  cliente   Clientes @relation(fields: [clienteId], references: [id])
}

model Chamado {
  id               Int            @id @default(autoincrement())
  titulo           String
  descricao        String
  criadoEm         DateTime        @default(now())
  atualizadoEm     DateTime        @updatedAt
  status           StatusEnum      @default(EM_ABERTO) // Usando status fixo
  prioridadeId     Int
  criadoPor        Int
  clienteId        Int
  quadroId         Int
  workspaceId      Int             
  numeroSequencial Int   
  solucao          String? 
  concluidoEm      DateTime?   
  arquivado        Boolean         @default(false)
  arquivadoEm      DateTime?      
  cliente          Clientes        @relation(fields: [clienteId], references: [id])
  quadro           Quadro          @relation(fields: [quadroId], references: [id])
  users            ChamadoUser[]
  prioridade       Prioridade      @relation(fields: [prioridadeId], references: [id])
  historico        ChamadoHistorico[] 

  @@unique([workspaceId, numeroSequencial]) 
}

model ChamadoUser {
  userId       Int
  chamadoId    Int
  user         User              @relation(fields: [userId], references: [id])
  chamado      Chamado           @relation(fields: [chamadoId], references: [id])

  @@id([userId, chamadoId])
}

model ChamadoHistorico {
  id              Int       @id @default(autoincrement())
  chamadoId       Int       // Relaciona ao chamado
  alteradoPorId   Int?      // Relaciona ao usuário que fez a alteração/comentário
  tipo            String    // Tipo de histórico: "STATUS", "PRIORIDADE", "COMENTARIO", etc.
  descricao       String?   // Descrição do comentário (para quando tipo for "COMENTARIO")
  valorAnterior   String?   // Valor anterior (ID do status, prioridade, ou outro campo alterado)
  valorNovo       String?   // Novo valor (ID do status, prioridade, ou outro campo alterado)
  criadoEm        DateTime  @default(now()) // Data da alteração ou do comentário

  // Relacionamentos
  chamado         Chamado   @relation(fields: [chamadoId], references: [id])
  user            User?     @relation(fields: [alteradoPorId], references: [id])

  @@index([chamadoId])
  @@index([alteradoPorId])
}

model Setor {
  id          Int       @id @default(autoincrement())
  nome        String
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  quadros     Quadro[]
  prioridade  Prioridade[]
  membros     SetorMembro[]    // Relacionamento com tabela intermediária para membros do setor
}

model SetorMembro {
  setorId   Int
  userId    Int
  setor     Setor @relation(fields: [setorId], references: [id])
  user      User  @relation(fields: [userId], references: [id])

  @@id([setorId, userId])
}

model Prioridade {
  id          Int       @id @default(autoincrement())
  nome        String
  setorId     Int       
  setor       Setor     @relation(fields: [setorId], references: [id])
  Chamado     Chamado[]
}

model Quadro {
  id            Int       @id @default(autoincrement())
  nome          String
  setorId       Int
  setor         Setor     @relation(fields: [setorId], references: [id])
  ativo         Boolean @default(true)
  chamados      Chamado[]
  responsavelId Int        
  responsavel   User       @relation(fields: [responsavelId], references: [id]) 
}

model Notificacao {
  id            Int       @id @default(autoincrement())
  userId        Int
  tipo          String
  mensagem      String
  workspaceId   Int?      // Pode ser opcional, dependendo do tipo da notificação
  aceito        Boolean @default(false)
  dataCriacao   DateTime  @default(now())
  dataExpira    DateTime?  
  lido          Boolean   @default(false)
  arquivado     Boolean @default(false)
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum StatusEnum {
  EM_ABERTO
  EM_ANALISE
  EM_ESPERA
  EM_ANDAMENTO
  CONCLUIDO
  CANCELADO
}
